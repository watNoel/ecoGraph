---
title: "InteractEcoNet"
author: "Pamela Santana"
format: html
editor: visual
---

## Working with one network

We will work with pollination networks from the database Web of Life ("https://www.web-of-life.es/"). For that, we will need use rjson to be able to read the data from the database. 

First we take a look on how how many networks we have by country:

```{r import data from one network}
# import the jsonlite package 

library("rjson") 
library("jsonlite")
library("kableExtra")

# define the base url
base_url <- "https://www.web-of-life.es/"

# download of all pollination networks
json_url <- paste0(base_url,"get_networks.php?interaction_type=Pollination") 

pol_nws <- jsonlite::fromJSON(json_url)

library(dplyr)
length(unique(pol_nws$network_name))#172 networks
class(pol_nws)#data.frame

pol_nws_info <- read.csv(paste0(base_url,"get_network_info.php"))

pol_nws_info <- filter(pol_nws_info, network_type=="Pollination")

# see what information is provided 
#colnames(pol_nws_info)
countries<-distinct(pol_nws_info, country, region)

quantNet<-pol_nws_info|> 
  group_by(region, country)|>
  summarise(n_networks=n())

names(quantNet) <- c("Continent", "Country", "Number of networks")

quantNet |> 
  kbl() |>
  kable_classic(full_width = F, html_font = "Cambria")

```

And we can visualize it:

```{r amount of networks per country}

quantNet|>
  ggplot(aes(x=reorder(Country,+`Number of networks`), y=`Number of networks`))+
  geom_bar(stat="identity", width = 0.5)+theme_bw()+
  facet_wrap(~Continent, scales="free_x", nrow = 1, ncol = 5)+ labs(x=NULL)+theme(axis.text.x = element_text(angle = 90))

```

After that, we can work on the network:

```{r general metrics for one network}

library(igraph)

all_pol_nw_names <- distinct(pol_nws, network_name)

#net_to_graph<-function(netname, if_directed=F){
#  curr_net <- pol_nws|> 
#    filter(network_name==!!netname)|> 
#    select(species1, species2, connection_strength)|>
#    graph_from_data_frame(directed = if_directed)
#  return(curr_net)}

#makegraphs<-purrr::map(as.list(unique(pol_nws$network_name)),.f=net_to_graph)

#selecting a network

netName<-all_pol_nw_names|> 
  filter(network_name=="wherever come from Shiny")|> 
  select(network_name)

netName<-all_pol_nw_names[1,1]

net<-pol_nws|> 
  filter(network_name==!!netName)|> 
  select(species1, species2, connection_strength)

graph<-graph_from_data_frame(net, directed = T)

net_matrix<-as_adjacency_matrix(graph,
                          #type = "lower", # it is directed!!!
                          #attr = "connection_strength",
                          sparse = FALSE)
#class(net_matrix)
#class(net_matrix)<-"numeric"
#net_matrix[which(is.na(net_matrix) == T)]<-0
#dim(net_matrix)

net_info <- read.csv(paste0(base_url,paste("get_species_info.php?network_name=",netName, sep="")))

# General metrics

plants<-net_info|> filter(role=="Plant")|> nrow()
animals <- net_info|> filter(role=="Pollinator")|> nrow()
size <- plants*animals
richness <- plants+animals
links <- net|> nrow()
conn <- round(links/size, 3)

netMetrics <- data.frame(netName, size, conn, plants, animals, richness)

names(netMetrics) <- c("Network", "Size", "Connectance", "Amount of plants species", "Amount of pollinator species", "Total amount of species")

netMetricsTab<-netMetrics |> 
  kbl() |>
  kable_classic(full_width = F, html_font = "Cambria")

netMetricsTab
```


```{r barplots for one network}

library(ggplot2)
library(purrr)

netOrg<-net_info|> 
  group_by(role, family)|>
  summarise(n_networks=n())

pal<-viridis::viridis(nrow(netOrg))
ggplot(na.omit(as.data.frame(netOrg)))+
  geom_bar(aes(x=reorder(family,+n_networks), y=n_networks, fill = family), stat="identity", width = 0.5)+
  labs(title="Number of species per family", x="Family", y="Number of species")+
  facet_wrap(~role, scales="free_x", nrow = 1, ncol = 2)+ scale_fill_manual(values=pal) + theme_bw()+
  theme(axis.text.x = element_text(angle = 90))
```


```{r plotting the network}

isResource <- net_info$is.resource %>% as.logical() # 0/1 converted to FALSE/TRUE

# Add the "type" attribute to the vertices of the graph 
V(graph)$type <- !(isResource) 
E(graph)$arrow.mode = "-"

color1<-"lightblue"
color2<-"yellow"

V(graph)$color <- ifelse(V(graph)$type == TRUE, color1, color2)

netLayout<-layout_as_bipartite(graph)

netPlot<-plot(graph, 
     layout=netLayout, 
     arrow.mode=0,
     vertex.label=NA,
     vertex.size=4,
     asp=0.2)

```


#options: tidygraph,
plotly
GGally
sna
network
visNetwork



```{r trying to make the network interactive}
library(network)
library(plotly)
library(GGally)
library(sna)

net1 <- network(net, matrix.type = "edgelist")

net1 <- network(net_matrix, matrix.type = "adjacency")

try <- ggnet2(net1, node.size = 1, node.color = "black", 
edge.size = 1, edge.color = "grey")

ggplotly(try)
